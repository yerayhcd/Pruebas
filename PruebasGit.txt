//permisos de administrador en la ejecución de linux
sudo

//Cambiar de unidad y carpeta en el bash
cd /G/Practicas/Git

//Se muestran todas las configuraciones de Git.
git config

//Mostrar la ruta de los párametros modificados
git config --list --show-origin

//Se muestra la configuración de Git.
git config --list

//Configurar el nombre de usuario para registrar las modificaciones
git config --global user.name "Nombre de Usuario"

//configurar la cuenta de correo del usuario que realizara las modificaciones
git config --global user.email "usuario@correo.com"

//Inscibe la carpeta en el controlador de versiones de Git.
git init

//Adiciona un archivo a Git.
git add nombreArchivo.txt
//Adiciona todos los archivos ubicados en el repositorio
git add .

//Confirma la actualización de cambios realizados en Git y se adiciona un comentario.
git commit -m "Un comentario!!!"

//Conocer el estatus del repositorio
git status

//Conocer las modificaciones a través de la historia realizadas sobre un archivo.
git log nombreArchivo.txt

//Enviar el hacia un repositorio remoto.
git push

//Traer de un repositorio remoto hacia un ruta local
git pull

//Consultar las modificaciones realizadas sobre el archivo
git show nombreArchivo.txt

//Para abrir un archivo directamente en Visual Studio Code
code nombreArchivo.txt

//Al momento de no hacer commentarios en el commit Git muestra una ventana solicitando el mensaje
//para salir de esta ventana hay que pedir ayuda, gritar o hacer un curso.

//se debe presionar las teclas
Esc + Shift + z + z

//En cualquier momento se puede obtener las diferencias en las versiones guardadas por Git.
1. obtener la llave de la modificación, es un número largo que se ve despues de la palabra commit cuando se ejecuta la instrucción
git Log nombreArchivo.txt
2. ejecutar la siguiente instrucción
git diff 49c875e94085c8a3d3668e5a2e271c75b6d899fc f4d1cbc2b74c97c5414481433240b62edd50a7fe
3. La forma correcta es colocar la versión mas reciente primero y posterior la mas antigua.
// y en rojo se muestra lo nuevo y en verde a versión anterior si existe.

//Si quiero devolver el archivo a una versión anterior se utilisa git reset
git reset 557800ab58b6eb223825c5e793ac8293a2f37f8d --hard

1. --hard devuelve todo a la versión escogida.
2. --soft deja en Staging las modificaciones realizadas para validar.

//cuando se ha creado un archivo y se adiciona pero sin commit, el archivo posteriormente puede ser modicado y con git status 
//se pueden visualizar las modificaciones realizadas despues del add con -    git diff
git diff
//se muestra un + en verde con las adiciones y un - en rojo para lo eliminado

//para ver los cambios especificos a partir del commit
git log --stat

//con la letra q se puede salir de la instrucción.

//para ver archivos en versiones previas se debe buscar la identificación de la versión y el nombre del archivo, OJO no se debe hacer commit.
git checkout 39f8e2ca24cc50bea4649b589b5ce751a9002006 Post.html

//para volver a obtener la versión registrada en master = "Get Latest version"
git checkout master Post.html

//Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --cached

//Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro
//de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git rm --force

//Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, 
//solo para que los últimos cambios de estos archivos no se envíen al último commit.
git reset HEAD

//Para conocer las ramas creadas se utiliza el comando branch y en verde mostrara sobr la cual se encuentra Git.
git branch

//para crear la rama se utiliza 'git branch nombreRama' y al utilizar el git show el 'HEAD apunta a master y a la rama creada'
git branch nombreRama

//Para cambiar de rama se hace con checkout, en el apuntador se debe ver el cambio.
git checkout nombreRama

//Para volver al tronco se vuelve con checkout
git checkout master

//para hacer add y commit al mismo tiempo se puede utilizar commit -am
git commit -am "Mensaje de referencia para el commit"

//Para realizar el merge siempre debo estar dentro de la rama a la cual quiero actualizar "por lo general el tronco"
//o en casos atipicos actualizar una rama con modificaciones realizadas en otras ramas o desde el tronco.
git merge

//Para subir desde un repositorio local hacia Git Hub
//git remote add origin url 
git remote add origin https://github.com/yerayhcd/Pruebas.git

//para conocer las ramas remotas
git remote

//Para conocer de forma verval o explicita las ramas remotas
git remote -v

//para taer las modificaciones existentes en Git Hub para que posteriormente se pueda hacer el push
git pull origin master 

//para poder fusionar las historias del remoto y del local en caso de que se muestre el mensaje
//fatal: refusing to merge unrelated histories.
git pull origin master --allow-unrelated-histories

//para enviar la versión de master a Git Hub.
git push origin master

//instrucción para crear las llaves públicas y privadas con SSH Security Shell.
//ssh-keygen -t rsa -b 4096 -C "correo@email.com"
ssh-keygen -t -rsa -b 4096 -C "yerayhcd@gmail.com"

//Se puede colocar un "passphrase" que es una contraseña adicional sobre la llave privada.

//En windows y Linux se debe verificar que el servidor de SSH este "enabled", se debe recibir el número de PID.
eval $(ssh-agent -s)

//Se debe agregar la llave privada, que debe estar en la ruta definida al momento de crearla
//con "pwd" se puede conocer la ruta
//ssh-add rutaEscogida/id_rsa
ssh-add /g/Practicas/Git/id_rsa 

//para registra la llave en GitHub se relizan los siguientes pasos.
1. Ingresar al perfil del usuario.
2. En el perfil seleccionar Settings.
3. En el panel izquierdo buscar SSH and GPG keys
4. En la ventana nueva hacer clic en el botón New SSH key.
5. Asignar un nombre, título o descripción para su identificación.
6. en el campo key se debe pegar la llave pública. generada en los pasos anteriores.
7. Ingresar la contraseña de la plataforma.


//despues de realizar la modificación o registro de la llave SSH, por ejemplo Git Hub
//se puede actualizar el remote
git remote set -url origin git@github.com:yerayhcd/Pruebas.git

//al ejecutar git remote ya se debio actualizar la url de https a git@, se debe ejecuara antes y despues de la modificación realizada
git remote -v

//Para visualizar graficamente en la consola la creación y commits de las ramas se utiliza graph.
git log --all --graph

//para visualizarlo un poco mas comprimido se utiliza.
git log --all --graph --decorate --oneline

//En linux se pueden utilizar alias para esos comandos que son largos o muy extensos y dificesles de aprender
//alias nombreAlias="instrucción"
alias arbolGit="git log --all --graph --decorate --oneline"

//para llamarlo solo escribo elnombre asignado al alias.
arbolGit

//los tags son como puntos de referencia que se utilizan para identificar versiones o modificaciones puntuales.
//Puedo crear tags con git pero conociendo los hash de las versiones
//git tag -a nombreTag -m "Mensaje o comentario" hash
git tag -a v0.01 -m "primeros pasos" c4356ef

//Para visualizar la lista de los tags existentes se utiliza.
git tag

//para visualizar a que hash esta referenciando un tag de utiliza.
git show-ref --tags

//para enviar los tags a GitHub se utiliza, se recomienda hacer un pull antes de hacer cualquier commit.
git push origin --tags

